/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package simple;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 */
public class Work implements TBase, java.io.Serializable {
  public int cpuid;
  public int type;
  public int addr;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean cpuid = false;
    public boolean type = false;
    public boolean addr = false;
  }

  public Work() {
  }

  public Work(
    int cpuid,
    int type,
    int addr)
  {
    this();
    this.cpuid = cpuid;
    this.__isset.cpuid = true;
    this.type = type;
    this.__isset.type = true;
    this.addr = addr;
    this.__isset.addr = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Work)
      return this.equals((Work)that);
    return false;
  }

  public boolean equals(Work that) {
    if (that == null)
      return false;

    boolean this_present_cpuid = true;
    boolean that_present_cpuid = true;
    if (this_present_cpuid || that_present_cpuid) {
      if (!(this_present_cpuid && that_present_cpuid))
        return false;
      if (this.cpuid != that.cpuid)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_addr = true;
    boolean that_present_addr = true;
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (this.addr != that.addr)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.I32) {
            this.cpuid = iprot.readI32();
            this.__isset.cpuid = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset.type = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.I32) {
            this.addr = iprot.readI32();
            this.__isset.addr = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("Work");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "cpuid";
    field.type = TType.I32;
    field.id = 1;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.cpuid);
    oprot.writeFieldEnd();
    field.name = "type";
    field.type = TType.I32;
    field.id = 2;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    field.name = "addr";
    field.type = TType.I32;
    field.id = 3;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.addr);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("Work(");
    sb.append("cpuid:");
    sb.append(this.cpuid);
    sb.append(",type:");
    sb.append(this.type);
    sb.append(",addr:");
    sb.append(this.addr);
    sb.append(")");
    return sb.toString();
  }

}

